<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd    
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd    
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd    
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd    
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd 
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd ">
	<!-- 读取属性文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/jdbc.properties</value>
			</list>
		</property>
	</bean>
	<!-- mybatis集成 -->
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"
		lazy-init="true" />
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.ruomm.dto" />
		<!-- <property name="typeAliasesSuperType" value="实体类顶级包路径" /> -->
		<property name="mapperLocations" value="classpath:mappingconfig/*.xml" />
		<property name="configLocation" value="classpath:config/mybatis-config.xml" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- 自动装配DAO -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		<property name="basePackage" value="com.ruomm.dao"></property>
	</bean> -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
        <property name="basePackage" value="com.ruomm.dao" />  
        <property name="properties">
        	<value>
        	notEmpty=false
        	IDENTITY=MYSQL
        	mappers=tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.MySqlMapper
        	</value> 
        </property>  
    </bean>
	<!-- 数据库连接池设置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${druid.driverClassName}" /><!--数据库驱动类 -->
		<!-- 测试 185数据库 TEST -->
		<!--连接路径 -->
		<property name="url" value="${druid.url}" />
		<!-- 配置密码加密和统计相关参数，统计慢sql的单位为毫秒，此处配置为3秒钟，超过3秒钟的sql为慢sql -->
		<!--用户名 -->
		<property name="username" value="${druid.username}" />
		<!--密码 -->
		<property name="password" value="${druid.password}" />
		<!--配置一些过滤器类 -->
		<property name="filters" value="${druid.filters}" />
		<!-- 配置具体过滤器类中的属性 -->
		<property name="connectionProperties" value="${druid.connectionProperties}" />
		<!-- 配置初始化大小、最小、最大 -->
		<!--初始化最大的连接数量 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<!--最小的空闲数量 -->
		<property name="minIdle" value="${druid.minIdle}" />
		<!--最大的活跃的数量 -->
		<property name="maxActive" value="${druid.maxActive}" />
		<!--最长的等待时间 -->
		<property name="maxWait" value="${druid.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，相当于C3P0的idleConnectionTestPeriod 参数，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<!-- 测试连接，单位为毫秒 -->
		<property name="validationQueryTimeout" value="${druid.validationQueryTimeout}" />
		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!-- 如果用Oracle，则把poolPreparedStatements配置为true，MySQL可以配置为false。 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 日志文件输出时间 -->
		<property name="timeBetweenLogStatsMillis" value="300000" />
		<!-- 监控数据库 -->
		<property name="proxyFilters">
			<list>
				<!-- 配置SQL状态监控 -->
				<ref bean="stat-filter" />
				<!-- 配置SQL防火墙 -->
				<ref bean="wall-filter" />
				<!-- 配置SQL日志监控 -->
				<ref bean="log-filter" />
			</list>
		</property>
		<property name="defaultAutoCommit" value="false" />
	</bean>
	<!-- SQL状态监控过滤器，需配置 proxyFilters -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="3000" />
		<property name="logSlowSql" value="true" />
		<property name="mergeSql" value="false" />
		<property name="dbType" value="oracle" />
	</bean>
	<!-- SQL日志过滤器，需配置 proxyFilters -->
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4j2Filter">
		<property name="connectionLogEnabled" value="false" />
		<property name="statementLogEnabled" value="true" />
		<property name="resultSetLogEnabled" value="true" />
		<property name="statementExecutableSqlLogEnable" value="true" />
	</bean>
	<!-- SQL防火墙过滤器，需配置 proxyFilters -->
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<property name="dbType" value="oracle" />
		<property name="config" ref="wall-filter-config" />
	</bean>
	<bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig"
		init-method="init">
		<property name="dir" value="META-INF/druid/wall/oracle" />
		<!-- <property name="multiStatementAllow" value="true" /> <property name="selectUnionCheck" 
			value="false" /> -->
		<property name="functionCheck" value="false" />
		<property name="strictSyntaxCheck" value="false" />
		<property name="selectWhereAlwayTrueCheck" value="false" />
		<property name="selectHavingAlwayTrueCheck" value="false" />
	</bean>

	<!--5 声明式事务管理 -->
	<!--定义事物管理器，由spring管理事务 -->

	<!-- 事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- SpringMVC设置了注解扫描的类包component-scan在事务范围内，此配置应该移到SpringMVC里面-->
	<!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性 -->
	<!-- <tx:annotation-driven transaction-manager="txManager"
		proxy-target-class="true" /> -->

</beans>